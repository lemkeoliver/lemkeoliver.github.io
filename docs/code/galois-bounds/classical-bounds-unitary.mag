/* This file is part of the verification of the bounds on classical almost simple groups presented in Lemma 4.10.
It implements the strategy from that lemma.
This particular file is for unitary groups.
*/

load "find-invariants.mag";

labels:=["Easy invariants", "Schmidt"];

// m=3 first

aUnitary3:=0;

m:=3;
for q in [3..1000] do
	if IsPrimePower(q) then
		n := q^3+1;
		G := 1/GCD(m,q+1)*q^(1/2*m*(m-1))*&*[q^(i+1)-(-1)^(i+1) : i in [1..m-1]];;
		w := 21;
		
		easya := (w-1/2)*n/Sqrt(G);
		schmidt := n*(n+2)/4/Sqrt(G);
		
		a,i:=Minimum([easya,schmidt]);
		
		srcqm := labels[i];
		
		if (q eq 3 or q eq 4) then
			MinInvsT := FindMinimalInvariants(PSU(3,q));
			GammaU:=Normalizer(SymmetricGroup(Integers()!n),PSU(3,q));
			MinInvsG := FindMinimalInvariants(GammaU);
			bdT := (&+MinInvsT - n/2)/Sqrt(G);
			bdG := (&+MinInvsG - n/2)/Sqrt(2*G);
			
			mininvbd,i := Maximum([bdT,bdG]);
			if mininvbd lt a then
				a := mininvbd;
				srcqm := ["PSU(3," cat Sprint(q) cat ") invariants; " cat Sprint(Multiset(MinInvsT)), "PGammaU(3," cat Sprint(q) cat ") invariants; " cat Sprint(Multiset(MinInvsG))][i];
			end if;
		end if;
		
		if q ge 5 and q le 17 then
			T:=PSU(3,q);
			Gamma:=Normalizer(SymmetricGroup(Integers()!n),T);
			minstab:=Minimum(&cat[[#Stabilizer(Gamma,[1,i,j]) : j in [i+1..n]] : i in [2..n-1]]);
			if minstab eq 1 then
				// Base of size 3
				w:=10;
				bettera := (w-1/2)*n/Sqrt(G);
				if bettera lt a then
					a := bettera;
					srcqm := "Base of size 3.";
				end if;
			end if;
		end if;
		
		if q eq 5 then
			T := PSU(3,5);
			T50 := CosetImage(T, MaximalSubgroups(T : IndexEqual:=50)[1]`subgroup);
			G50 := Normalizer(SymmetricGroup(50),T50);
			MinInvsT := FindMinimalInvariants(T50);
			MinInvsG := FindMinimalInvariants(G50);
			bdT50 := (&+MinInvsT - 25)/Sqrt(G);
			bdG50 := (&+MinInvsG - 25)/Sqrt(2*G);
			mininvbd,i := Maximum([bdT,bdG]);
			base126 := (10-1/2)*n/Sqrt(3*G);
			
			if mininvbd ge base126 then
				if mininvbd lt a then
					a := mininvbd;
					srcqm := ["PSU(3,5), deg 50 invariants; " cat Sprint(Multiset(MinInvsT)), "PSU(3,5).2 invariants; " cat Sprint(Multiset(MinInvsG))][i];
				end if;
			else
				if base126 lt a then
					a := base126;
					srcqm := "Base 3 for PSU(3,5).3";
				end if;
			end if;
		end if;
		
		if q le 100 then
			print q,a;
			print srcqm;
			print "";
		end if;
		
		if a ge aUnitary3 then
			aUnitary3 := a;
			srcq:=q;
			srcm:=m;
			src:=srcqm;
		end if;
	end if;
end for;
