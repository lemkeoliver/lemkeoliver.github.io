/*
MAGMA: Adding in known cases of Conjecture 1

This includes previously known cases that are not subsumed by our work (all of small degree) and
families of groups which follow immediately from our work without additional checking.
*/

// We first create a useful auxiliary array, containing the index in Database of the first 
//		group with a given degree

FirstIndex := [1] cat [1+ &+[NumberOfTransitiveGroups(n) : n in [1..i-1]] : i in [2..MaxDegree]];

/*
Degrees up to 5
	The number of extensions of degree \le 5 is known to be << X^1
	Moreover, Conjecture 1 is known for S_n with n \le 5.
*/
i := 1;
while Database[i]`degree le 5 do
	if Database[i]`bound gt 1.0 then
		Database[i]`bound := 1.0;
		if Database[i]`order eq Factorial(Database[i]`degree) then
			Database[i]`conjecture := true;
		end if;
	end if;
	i := i+1;
end while;



/*
Bhargava--Wood prove Conjecture 1 for S3 in degree 6
	This is the group 6T2, which will always be entry 16 in our database.
	(There are 14 transitive groups of degree up to 5.)
*/
if MaxDegree ge 6 then
	Database[16]`bound := 1.0/3;
	Database[16]`conjecture := true;
end if;

/*
	Malle's conjecture is known for transitive direct products of the form S3 x A, S4 x A, and S5 x A.
*/

for d in [3..5] do
	Sd := SymmetricGroup(d);
	for n in [2 .. Floor(MaxDegree/d) ] do
		for A in TransitiveGroups(n, IsAbelian) do
			SdxA := TransitiveDirectProduct(Sd,A);
			label := TransitiveGroupIdentification(SdxA);
			Database[FirstIndex[d*n]+label-1]`conjecture := true;
			Database[FirstIndex[d*n]+label-1]`bound := 1.0/Database[FirstIndex[d*n]+label-1]`malleindex;
		end for;
	end for;
end for;


/*
The next function implements Theorem 1.9 for wreath products by S3.
Takes as input the degree n of a transitive group G and
	a number beta such that N(K,G;X) << X^{beta+\epsilon}. The function
	then applies Theorem 1.9 and outputs new_beta which satisfies
	 - N(K,S_3 \wr G;X) << X^{new_beta + \epsilon}
	and a boolean detecting whether Conjecture 1 has been proven.
*/

checkS3wreathG:= function(n,beta)
    new_beta := (1/3)*(beta + 1/3 - 1/(3*n) + 1);
    if new_beta lt 1 then
        return 1.0,true;
    else
        return new_beta,false;
    end if;
end function;




