/*

Magma code related to the paper, "An approximate form of Artin's holomorphy conjecture and non-vanishing of Artin L-functions," by Robert J. Lemke Oliver, Jesse Thorner, Asif Zaman

Author: Robert J. Lemke Oliver
Contact: robert.lemke_oliver@tufts.edu, lemkeoliver@gmail.com

In particular, this code is intended to verify Hypothesis T(G,N) from that paper for all groups G up to a point.
It proceeds using the obvious algorithm suggested by Theorem 5.9 of that paper, which reduces T(G,N) to verifying what we call the "maximal intersection property" (see Lemma 5.8.ii) for groups N = T^d for some finite simple T, with G \leq Aut(N) such that G/N is cyclic of non-prime power order.

The functions VerifyThroughOrder(n) and VerifyThroughDegree(n) verify that the maximal intersection property holds for all of the socles N=T^d in the relevant ranges dictated by Theorem 5.9.  An output of 0 indicates that all is well.  Full output files are also available on github, but to obtain Corollary 5.10, the following computations were used:

time VerifyThroughOrder(100000000);
	// full output truncated; see order-10-8-verification.txt
0
Time: 8605.300

time VerifyThroughDegree(40);
	// full output truncated; see degree-40-verification.txt
0
Time: 2481.790


Other functions in this code: EnumerateSimplesByDegree, EnumerateSimplesByOrder, EnumerateSoclesByDegree, EnumerateSoclesByOrder (all straightforward), and VerifyMaximalIntersection.

The function VerifyMaximalIntersection(G,N) is where the meat lies. It checks that the quotient G/N is cyclic of non-prime power order as a matter of sanitation, then attempts to verify whether the maximal intersection property holds for G and N.  For the most part, this is deterministic.  However, if some maximal has too large index (> 10^7) then Magma will not compute all of its conjugates.  At that stage, we appeal to a random algorithm, print a warning message, and see if the MIP still holds when we only work with a bunch of random conjugates.  This is relevant already for socles like A_6^5, so there is unfortunately a small element of randomness to this computation (particularly for the degree <= 40 verification).  Presently, it's set to use 10^5 random conjugates by default, when it's necessary.  I've seen it fail when only 10^4 random conjugates are used, but I've also seen it pass with 10^4.  Thus, 10^5 feels about right to me, but YMMV, and I have put little effort into tuning parameters.

*/

function EnumerateSimplesByDegree(N)
	// Returns a list of simple groups in their minimal permutation representations, all of degree at most N
	
	simple_list := [];
	
	for n in [5..N] do
		for G in PrimitiveGroups(n) do
			// The minimal permutation representation of a simple group is necessarily primitive
			
			if IsSimple(G) eq true and IsAbelian(G) eq false then
				// Found a simple, let's just make sure it's not already on our list
				
				already_there := false;
				for G2 in simple_list do
					if already_there eq false and IsIsomorphic(G,G2) then
						already_there := true;
					end if;
				end for;
				if already_there eq false then
					Include(~simple_list,G);
				end if;
			end if;
		end for;
	end for;
	return simple_list;
end function;

function EnumerateSoclesByDegree(N)
	// Returns a list of groups T^d, where T is simple and T^d has minimal degree <= N
	// Not actually used anywhere, but nice to have I guess?
	
	simples := EnumerateSimplesByDegree(N);
	
	socles := [];
	
	for T in simples do
		Include(~socles,T);
		for d in [2..(N div Degree(T))] do
			// Now add T^d, which is conveniently the socle of T \wr S_d
			Include(~socles,Socle(WreathProduct(T,SymmetricGroup(d))));
		end for;
	end for;
	return socles;
end function;

function EnumerateSimplesByOrder(N)
	// Returns a list of simple groups of order at most N
	simples := [];
	
	i := 1;
	
	while (#SimpleGroup(i) le N) do
		Include(~simples,SimpleGroup(i));
		i:=i+1;
	end while;
	return simples;
end function;

function EnumerateSoclesByOrder(N)
	// Returns a list of groups T^d, where T is simple and |T^d| \leq N
	// Not actually used anywhere

	simples := EnumerateSimplesByOrder(N);
	
	socles := [];
	
	for T in simples do
		Include(~socles,T);
		for d in [2..Floor(Log(N)/Log(#T))] do
			// Now add T^d, which is conveniently the socle of T \wr S_d
			Include(~socles,Socle(WreathProduct(T,SymmetricGroup(d))));
		end for;
	end for;
	return socles;
end function;

function VerifyMaximalIntersection(G,N : rand:=0)
	/* 
	Input: finite G, normal N such that G/N is cyclic of not prime power order
	Returns 0 if the maximal intersection property holds and -1 if improperly called.
	This is the meaty function.  
	
	If rand:=0, it will try to do things completely deterministically. 	This is despite Magma's best efforts: the conjugacy representatives it outputs for maximal subgroups are not deterministic! That means your runtime can change from call to call. 	
	
	Also, if you're working with a maximal subgroup of index >= 10^7, it will not compute all conjugacy representatives.  We then pass to a random algorithm in that case, computing 10^5 random conjugates.  If rand>0, we instead compute rand-many random conjugates, unless there are fewer than rand conjugates to find.  If the MIP fails with those restricted conjugates, the function returns 1.  It will also print a message whether it's a true counterexample or a failure to the random algorithm */
	
	Q,pi := G/N;
	if IsCyclic(Q) eq false or IsPrimePower(#Q) eq true then
		print "G/N should be cyclic of not prime power order.";
		return -1;
	end if;
	
	// Find conjugacy representatives for the relevant maximal subgroups
	M := [m`subgroup : m in MaximalSubgroups(G) | #pi(m`subgroup) eq #Q];
	
	// If there's at most one such subgroup, we're happy
	if #M le 1 then
		return 0;
	end if;
	
	// There's more than one, so we have to do something to check the intersection condition
	S := SymmetricGroup(#M);
	L := {}; // Good transpositions
	
	// First, see if we got lucky and can avoid having to worry about conjugacy
	// NB: The computation of the conjugacy representatives of maximal subgroups is not deterministic!
	// That means there's genuinely an element of luck here every time this program is called
	
	for i in [1..#M-1] do
		for j in [i+1..#M] do
			if i ne j and #pi(M[i] meet M[j]) eq #Q then
				Include(~L,S!(i,j));
			end if;
		end for;
	end for;
	SL := sub<S | L>;
	
	if IsTransitive(SL) then
		return 0;
	end if;
	
	// We didn't get lucky this time around, so now we work harder
	
	rand0 := 0;
	
	cur := #L;
	for i in [1..#M-1] do
		ConjM := {};
		
		// Magma will only compute the conjugates of a subgroup with index at most 10^7
		
		if (rand eq 0 and Index(G,M[i]) lt 10^7) or rand ge Index(G,M[i]) then
			ConjM := Conjugates(G,M[i]); // Could be slow.  Run through the conjugates of M[i].
		else
			rand0 := rand;
			if rand0 eq 0 then
				print "      A maximal subgroup has too large index to compute its conjugates.";
				print "      Working with 100,000 random conjugates.";
				print "      Output is no longer deterministic.";
				rand0:=10^5;
			end if;
			for j in [1..rand0] do
				if #ConjM le Index(G,M[i]) then
					Include(~ConjM,M[i]^Random(G)); // Compute rand-many random conjugates
				end if;
			end for;
		end if;
		for m in ConjM do
			for j in [i+1..#M] do
				if #pi(m meet M[j]) eq #Q then
					Include(~L,S!(i,j));
				end if;
			end for;
			
			// Check if we added anything
			if #L gt cur then
				SL := sub<S | L>;
				if IsTransitive(SL) then
					return 0;
				end if;
				cur := #L;
			end if;
			
		end for;
	end for;
	
	// At this point, we've gone through all maximal subgroups in the deterministic case.  
	// If we haven't found it yet, then either this group failed the randomized trial or the maximal intersection property fails
	
	if rand0 gt 0 then
		// We entered the random world
		print "      Failed randomized trial.";\
	else
		// We didn't enter the random world
		print "******This group does not satisfy the maximal intersection property!!";
	end if;
	
	return 1;
end function;

function VerifyThroughDegree(n : rand:=0)
	simples := EnumerateSimplesByDegree(n);
	
	num := 0;
	for T in simples do
		num := num + Floor(n / Degree(T));
	end for;
	
	print "There are",num,"possible socle types of degree <=",n;
	
	total := 0;
	
	counter := 1;
	
	for T in simples do
		for d in [1..Floor(n/Degree(T))] do
			print "Working with socle",counter,"of",num;
			print "  Socle type",SimpleGroupName(T),"^",d;
			
			if Order(T) eq Order(AlternatingGroup(Degree(T))) and d eq 1 then
				// This group is of type A_n ^ 1.  We understand these already.
				print "    Group is almost simple of type A_n, moving on.";
			else
				print "    Computing Aut(T^d)";
				AutT := PermutationGroup(AutomorphismGroup(T));
				OutT := #AutT div #T;
				if OutT^d * Factorial(d) gt 1 and IsPrimePower(OutT^d * Factorial(d)) then
					// Socle has prime power index in its Automorphism group, moving on
					print "    Socle will have prime power index in Aut, moving on.";
				else
					T0 := Socle(AutT);
					W := WreathProduct(AutT,SymmetricGroup(d)); // Aut(T^d) = Aut(T) \wr S_d
					S := Socle(W); // Socle(Aut(T^d)) = T^d
					
					print "    Computing an isomorphic form of Aut(T^d)/T^d = Out(T) \wr S_d";
					OutT0,piT0 := AutT/T0;
					OutT0 := sub<OutT0 | [g : g in Generators(OutT0) | Order(g) gt 1]>;
					
					Q1 := WreathProduct(OutT0,SymmetricGroup(d));
										
					print "    Computing the cyclic subgroups of Out(T) \wr S_d";
					
					// Check cyclic subgroups before we compute the "real" quotient map
					
					C1s := [c`subgroup : c in CyclicSubgroups(Q1) | #c`subgroup gt 1 and IsPrimePower(#c`subgroup) eq false];
					
					cyc_count :=1;
					
					print "  This socle type has",#C1s,"possible cyclic images of not prime power order.";
					
					if #C1s gt 0 then
						/* 	There are some relevant cyclic subgroups.
							We now need to compute their lifts to W.
							The point of the above computation with Q1, etc., 
							is to save us from having to compute the quotient map
							W ->> W/S, which can be slow, until it's necessary...
							Too bad, we've got to do it now to compute these lifts. 
							I played with some alternative ways to do this, but this step is
							presently the bottleneck. */
					
						print "    Computing the quotient map Aut(T^d) -> Aut(T^d)/T^d";		
						Q,pi := W/S; 
						
						Cs := [c`subgroup : c in CyclicSubgroups(Q) | #c`subgroup gt 1 and IsPrimePower(#c`subgroup) eq false];
											
						for C in Cs do
							print "    Working with cyclic image",cyc_count,"of",#Cs;
							G := Inverse(pi)(C);
							
							vmi := VerifyMaximalIntersection(G,S : rand:=rand);
							total := total + vmi;
							cyc_count := cyc_count+1;
						end for;
					end if;
				end if;
			end if;
			counter:=counter+1;
		end for;
	end for;
	return total;
end function;


function VerifyThroughOrder(n : rand:=0)
	simples := EnumerateSimplesByOrder(n);
	
	num := 0;
	for T in simples do
		num := num + Floor(Log(n) / Log(#T));
	end for;
	
	print "There are",num,"possible socle types of order <=",n;
	
	total := 0;
	
	counter := 1;
	
	for T in simples do
		for d in [1..Floor(Log(n)/Log(#T))] do
			print "Working with socle",counter,"of",num;
			print "  Socle type",SimpleGroupName(T),"^",d;
			
			if Order(T) eq Order(AlternatingGroup(Degree(T))) and d eq 1 then
				// This group is of type A_n ^ 1.  We understand these already.
				print "    Group is almost simple of type A_n, moving on.";
			else
				print "    Computing Aut(T^d)";
				AutT := PermutationGroup(AutomorphismGroup(T));
				OutT := #AutT div #T;
				if OutT^d * Factorial(d) gt 1 and IsPrimePower(OutT^d * Factorial(d)) then
					// Socle has prime power index in its Automorphism group, moving on
					print "    Socle will have prime power index in Aut, moving on.";
				else
					T0 := Socle(AutT);
					W := WreathProduct(AutT,SymmetricGroup(d)); // Aut(T^d) = Aut(T) \wr S_d
					S := Socle(W); // Socle(Aut(T^d)) = T^d
					
					print "    Computing an isomorphic form of Aut(T^d)/T^d = Out(T) \wr S_d";
					OutT0,piT0 := AutT/T0;
					OutT0 := sub<OutT0 | [g : g in Generators(OutT0) | Order(g) gt 1]>;
					
					Q1 := WreathProduct(OutT0,SymmetricGroup(d));
										
					print "    Computing the cyclic subgroups of Out(T) \wr S_d";
					
					C1s := [c`subgroup : c in CyclicSubgroups(Q1) | #c`subgroup gt 1 and IsPrimePower(#c`subgroup) eq false];
					
					cyc_count :=1;
					
					print "  This socle type has",#C1s,"possible cyclic images of not prime power order.";
					
					if #C1s gt 0 then
						/* 	There are some relevant cyclic subgroups.
							We now need to compute their lifts to W.
							The point of the above computation with Q1, etc., 
							is to save us from having to compute the quotient map
							W ->> W/S, which can be slow, until it's necessary...
							Too bad, we've got to do it now to compute these lifts. 
							I played with some alternative ways to do this, but this step is
							presently the bottleneck. */
					
						print "    Computing the quotient map Aut(T^d) -> Aut(T^d)/T^d";		
						Q,pi := W/S; 
						
						Cs := [c`subgroup : c in CyclicSubgroups(Q) | #c`subgroup gt 1 and IsPrimePower(#c`subgroup) eq false];
											
						for C in Cs do
							print "    Working with cyclic image",cyc_count,"of",#Cs;
							G := Inverse(pi)(C);
							
							vmi := VerifyMaximalIntersection(G,S : rand:=rand);
							total := total + vmi;
							cyc_count := cyc_count+1;
						end for;
					end if;
				end if;
			end if;
			counter:=counter+1;
		end for;
	end for;
	return total;
end function;
