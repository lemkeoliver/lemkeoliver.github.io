function FindIndependentInvariants(G,d : debug:=false, trials:=10, height:=10)
	// Attempts to find a set of n algebraically independent invariants in degrees up to d
	// Will return the tuple of degrees of the invariants
	// These invariants are (probably) minimal, but are not proved to be so here
	// For an attempt at a proof, try FindMinimalInvariants
	
	n := Degree(G);
	if debug eq true then
		print "Computing invariant ring.";
		print "Current memory usage:", Memory();
	end if;
	ROI := InvariantRing(G,Rationals());
	if debug eq true then
		print "Computing invariant polynomials.";
		print "Current memory usage:", Memory();
	end if;
	Polys := InvariantsOfDegree(ROI,1);
	for dd in [2..d] do
		if debug eq true then
			print "Computed d=",dd-1;
			print "Current memory usage:", Memory();
		end if;
		Polys := Polys cat InvariantsOfDegree(ROI,dd);
	end for;
	
	mincorank:=n;
	
	if debug eq true then
		print "Computed invariant polynomials.";
		print "Current memory usage:", Memory();
	end if;
	
	for trial in [1..trials] do
		evalvec := [Random(-height,height) : j in [1..n]];
		M:=[];
		
		if debug eq true then
			print "Starting trial",trial;
			print "Current memory usage:", Memory();
		end if;
		
		if debug eq true then
			print "Computing evaluated derivatives";
			print "Current memory usage:", Memory();
		end if;
		
		for f in Polys do
			m := [Evaluate(Derivative(f,j),evalvec) : j in [1..n]];
			M:=Append(M,m);
		end for;
		
		if debug eq true then
			print "Computing corank";
			print "Current memory usage:", Memory();
		end if;
		
		cork := n-Rank(Matrix(M));
		
		if debug eq true then
			print "Computed corank";
			print "Current memory usage:", Memory();
		end if;
		
		if cork eq 0 then
			E := EchelonForm(Transpose(Matrix(M)));
			degs:=[];
			for i in [1..n] do
				j:=1;
				while E[i][j] eq 0 do
					j:=j+1;
				end while;
				Append(~degs,Degree(Polys[j]));
			end for;
			return degs,true,0;
		else
			mincorank:=Min(mincorank,cork);
		end if;
	end for;
	return [],false,mincorank;
end function;

function GuessInvariantDegree(G)
	// Attempts to "guess" the invariant degrees of a group G by using its Molien series
	// This is equivalent to putting a lower bound on the invariant degrees, as in Lemma 4.18 on the Mathieu groups
	
	n := Degree(G);
	codim := n;
	inv_deg := [];
	d:=1;
	MolG:=MolienSeries(G);
	while codim gt 0 do
		R:=PowerSeriesRing(Integers() : Precision:=d+1);
		MG:=R!MolG;
		FI := R!1;
		if #inv_deg gt 0 then 
			FI:=&*[1/(1-R.1^i) : i in inv_deg];
		end if;
		num_new := Minimum(Coefficient(MG-FI,d),codim);
		codim := codim - num_new;
		for i in [1..num_new] do
			Append(~inv_deg,d);
		end for;
		d:=d+1;
	end while;
	return inv_deg;
end function;

function FindMinimalInvariants(G : output:=true)
	// Computes a lower bound on the degrees of an independent set of invariants using the Molien series,
	// then attempts to see if there is a set of independent invariants matching that degree bound.
	// This is essentially the computation described in the proof of Lemma 4.18
	// This will return either : 	[tuple of degrees], true
	//					 			[], false
	// depending on whether these this strategy works.
	// It works suspiciously well for primitive groups.
	// The first failure is 8T42, though earlier groups do sometimes fail
	// (There is a probabilistic element to this computation.)
	
	if output then
		print "Computing a lower bound on the invariant degrees using a Molien series.";
	end if;
	
	InvLowerBound := GuessInvariantDegree(G);
	deg := Maximum(InvLowerBound);
	
	if output then
		print "....Done.";
		print "....Maximum degree is",deg;
	end if;
	
	if output then
		print "Trying to find independent invariants with degree bounded by",deg;
	end if;
	InvUpperBound := FindIndependentInvariants(G,deg);
	if output then
		print "....Done.";
	end if;
	
	if InvLowerBound eq InvUpperBound then
		if output then
			print "....Degrees match.";
		end if;
		return InvLowerBound,true;
	else
		if output then
			print "....Degrees *do not* match.";
		end if;
		return [],false;
	end if;
	
	return [],false;
	
end function;

function FindInvariantDeterminant(G,d : debug:=false, trials:=10, height:=10)
	// Attempts to find a set of n algebraically independent invariants in degrees up to d
	// Will return the determinant of the Jacobian matrix of the invariants
	// This might be a *very* bad idea for even moderately sized groups G
	
	n := Degree(G);
	if debug eq true then
		print "Computing invariant ring.";
		print "Current memory usage:", Memory();
	end if;
	ROI := InvariantRing(G,Rationals());
	if debug eq true then
		print "Computing invariant polynomials.";
		print "Current memory usage:", Memory();
	end if;
	Polys := InvariantsOfDegree(ROI,1);
	for dd in [2..d] do
		if debug eq true then
			print "Computed d=",dd-1;
			print "Current memory usage:", Memory();
		end if;
		Polys := Polys cat InvariantsOfDegree(ROI,dd);
	end for;
	
	mincorank:=n;
	
	if debug eq true then
		print "Computed invariant polynomials.";
		print "Current memory usage:", Memory();
	end if;
	
	inds := [];
	
	for trial in [1..trials] do
		evalvec := [Random(-height,height) : j in [1..n]];
		M:=[];
		
		if debug eq true then
			print "Starting trial",trial;
			print "Current memory usage:", Memory();
		end if;
		
		if debug eq true then
			print "Computing evaluated derivatives";
			print "Current memory usage:", Memory();
		end if;
		
		for f in Polys do
			m := [Evaluate(Derivative(f,j),evalvec) : j in [1..n]];
			M:=Append(M,m);
		end for;
		
		if debug eq true then
			print "Computing corank";
			print "Current memory usage:", Memory();
		end if;
		
		cork := n-Rank(Matrix(M));
		
		if debug eq true then
			print "Computed corank";
			print "Current memory usage:", Memory();
		end if;
		
		if cork eq 0 then
			E := EchelonForm(Transpose(Matrix(M)));
			degs:=[];
			for i in [1..n] do
				j:=1;
				while E[i][j] eq 0 do
					j:=j+1;
				end while;
				Append(~inds,j);
				Append(~degs,Degree(Polys[j]));
			end for;
			mincorank := 0;
			break;
		else
			mincorank:=Min(mincorank,cork);
		end if;
	end for;
	if mincorank gt 0 then
		return false,mincorank,[];
	end if;
	
	M:=Matrix([[Derivative(Polys[j],i) : i in [1..n]]: j in inds]);
	return Determinant(M);
end function;


function FindInvariantMatrix(G,d : debug:=false, trials:=10, height:=10)
	// Attempts to find a set of n algebraically independent invariants in degrees up to d
	// Will return the Jacobian matrix of the invariants
	// This might be a *very* bad idea for even moderately sized groups G
	
	n := Degree(G);
	if debug eq true then
		print "Computing invariant ring.";
		print "Current memory usage:", Memory();
	end if;
	ROI := InvariantRing(G,Rationals());
	if debug eq true then
		print "Computing invariant polynomials.";
		print "Current memory usage:", Memory();
	end if;
	Polys := InvariantsOfDegree(ROI,1);
	for dd in [2..d] do
		if debug eq true then
			print "Computed d=",dd-1;
			print "Current memory usage:", Memory();
		end if;
		Polys := Polys cat InvariantsOfDegree(ROI,dd);
	end for;
	
	mincorank:=n;
	
	if debug eq true then
		print "Computed invariant polynomials.";
		print "Current memory usage:", Memory();
	end if;
	
	inds := [];
	
	for trial in [1..trials] do
		evalvec := [Random(-height,height) : j in [1..n]];
		M:=[];
		
		if debug eq true then
			print "Starting trial",trial;
			print "Current memory usage:", Memory();
		end if;
		
		if debug eq true then
			print "Computing evaluated derivatives";
			print "Current memory usage:", Memory();
		end if;
		
		for f in Polys do
			m := [Evaluate(Derivative(f,j),evalvec) : j in [1..n]];
			M:=Append(M,m);
		end for;
		
		if debug eq true then
			print "Computing corank";
			print "Current memory usage:", Memory();
		end if;
		
		cork := n-Rank(Matrix(M));
		
		if debug eq true then
			print "Computed corank";
			print "Current memory usage:", Memory();
		end if;
		
		if cork eq 0 then
			E := EchelonForm(Transpose(Matrix(M)));
			degs:=[];
			for i in [1..n] do
				j:=1;
				while E[i][j] eq 0 do
					j:=j+1;
				end while;
				Append(~inds,j);
				Append(~degs,Degree(Polys[j]));
			end for;
			mincorank := 0;
			break;
		else
			mincorank:=Min(mincorank,cork);
		end if;
	end for;
	if mincorank gt 0 then
		return false,mincorank,[];
	end if;
	
	M:=Matrix([[Derivative(Polys[j],i) : i in [1..n]]: j in inds]);
	return M;
end function;

function FindInvariantPolynomials(G,d : debug:=false, trials:=10, height:=10)
	// Attempts to find a set of n algebraically independent invariants in degrees up to d
	// Will return the tuple of polynomials
	
	n := Degree(G);
	if debug eq true then
		print "Computing invariant ring.";
		print "Current memory usage:", Memory();
	end if;
	ROI := InvariantRing(G,Rationals());
	if debug eq true then
		print "Computing invariant polynomials.";
		print "Current memory usage:", Memory();
	end if;
	Polys := InvariantsOfDegree(ROI,1);
	for dd in [2..d] do
		if debug eq true then
			print "Computed d=",dd-1;
			print "Current memory usage:", Memory();
		end if;
		Polys := Polys cat InvariantsOfDegree(ROI,dd);
	end for;
	
	mincorank:=n;
	
	if debug eq true then
		print "Computed invariant polynomials.";
		print "Current memory usage:", Memory();
	end if;
	
	for trial in [1..trials] do
		evalvec := [Random(-height,height) : j in [1..n]];
		M:=[];
		
		if debug eq true then
			print "Starting trial",trial;
			print "Current memory usage:", Memory();
		end if;
		
		if debug eq true then
			print "Computing evaluated derivatives";
			print "Current memory usage:", Memory();
		end if;
		
		for f in Polys do
			m := [Evaluate(Derivative(f,j),evalvec) : j in [1..n]];
			M:=Append(M,m);
		end for;
		
		if debug eq true then
			print "Computing corank";
			print "Current memory usage:", Memory();
		end if;
		
		cork := n-Rank(Matrix(M));
		
		if debug eq true then
			print "Computed corank";
			print "Current memory usage:", Memory();
		end if;
		
		if cork eq 0 then
			E := EchelonForm(Transpose(Matrix(M)));
			pols:=[];
			for i in [1..n] do
				j:=1;
				while E[i][j] eq 0 do
					j:=j+1;
				end while;
				Append(~pols,Polys[j]);
			end for;
			return pols;
		else
			mincorank:=Min(mincorank,cork);
		end if;
	end for;
	return [];
end function;





